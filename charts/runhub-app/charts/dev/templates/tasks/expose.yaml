apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: expose
spec:
  params:
    - name: service
      type: string
    - name: subdomain
      type: string
    - name: tag
      type: string
    - name: env
      type: string
{{- if .Values.release }}
  workspaces:
    - name: prod-kubeconfig
      readOnly: true
{{- end }}
  steps:
    - name: expose
      image: gcr.io/bitnami-containers/kubectl:{{ template "runhub-app.dev.kubectlImageTag" . }}
      script: |
        if [ '$(params.env)' = 'dev' ]; then
          DOMAIN='{{ $.Values.domain }}'
          SUBDOMAIN='$(params.tag).$(params.subdomain)'
        elif [ '$(params.env)' = 'prod' ]; then
          export KUBECONFIG='$(workspaces.prod-kubeconfig.path)/kubeconfig'
          DOMAIN='{{ $.Values.global.prodDomain }}'
          SUBDOMAIN='$(params.subdomain)'
        fi

        kubectl apply --filename - <<EOF
        apiVersion: networking.istio.io/v1beta1
        kind: VirtualService
        metadata:
          name: $(params.tag)
          namespace: $(params.env)-{{ .Release.Name }}-$(params.service)
        spec:
          gateways:
            - $(params.env)-{{ .Release.Name }}/gateway
          hosts:
            - ${SUBDOMAIN:?}.${DOMAIN:?}
          http:
            - rewrite:
                authority: $(params.tag).$(params.env)-{{ .Release.Name }}-$(params.service).svc.cluster.local
              route:
                - destination:
                    host: $(params.tag).$(params.env)-{{ .Release.Name }}-$(params.service).svc.cluster.local
        EOF
    - name: migrate-traffic
      image: gcr.io/knative-releases/knative.dev/client/cmd/kn:{{ template "runhub-app.dev.knImageTag" . }}
      script: |
        if [ '$(params.env)' = 'prod' ]; then
          export KUBECONFIG='$(workspaces.prod-kubeconfig.path)/kubeconfig'
        fi

        REVISION=$(kn service describe '$(params.tag)' \
          --namespace '$(params.env)-{{ .Release.Name }}-$(params.service)' \
          --output jsonpath='{ .status.latestReadyRevisionName }')

        kn service update '$(params.tag)' \
          --namespace '$(params.env)-{{ .Release.Name }}-$(params.service)' \
          --traffic "${REVISION:?}=100"
