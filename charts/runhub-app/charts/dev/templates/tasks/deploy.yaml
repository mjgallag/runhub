apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: deploy
spec:
  params:
    - name: service
      type: string
    - name: tag
      type: string
    - name: sha
      type: string
    - name: environment
      type: string
{{- if .Values.release }}
  workspaces:
    - name: prod-kubeconfig
      readOnly: true
{{- end }}
  steps:
    - name: deploy
      image: gcr.io/knative-releases/knative.dev/client/cmd/kn:{{ template "runhub-app.dev.knImageTag" . }}
      script: |
        {{ include "runhub-app.dev.convertToDNSLabelShellFunction" . | nindent 8 }}

        TAG_DNS_LABEL="$(convert_to_dns_label '$(params.tag)')"

        if [ '$(params.environment)' = 'dev' ]; then
          DOMAIN='{{ $.Values.domain }}'
          SCALE_INIT=0
          SCALE_MIN=0
          SERVICE_PREFIX="${TAG_DNS_LABEL:?}."
        elif [ '$(params.environment)' = 'prod' ]; then
          export KUBECONFIG='$(workspaces.prod-kubeconfig.path)/kubeconfig'
          DOMAIN='{{ $.Values.global.prodDomain }}'
          SCALE_INIT=1
          SCALE_MIN=1
        fi

        PROTOCOL='http{{ if .Values.global.tls }}s{{ end }}'

        set -- \
          --namespace '$(params.environment)-{{ .Release.Name }}-$(params.service)' \
          --image '{{ template "runhub-app.dev.imagePathWithRegistry" . }}/$(params.service):'"${TAG_DNS_LABEL:?}"'@$(params.sha)' \
          --env RUNHUB_ENVIRONMENT='$(params.environment)' \
        {{- range $serviceName, $service := .Values.global.services }}
          --env 'RUNHUB_SERVICE_{{ upper $serviceName }}_URL='"${PROTOCOL:?}://${SERVICE_PREFIX}"'{{ $service.subdomain }}.'"${DOMAIN:?}" \
        {{- end }}
          --scale-init "${SCALE_INIT:?}" \
          --scale-min "${SCALE_MIN:?}" \
          --pull-secret container-registry-dockerconfigjson \
          --cluster-local

        if ! kn service update "${TAG_DNS_LABEL:?}" "$@"; then
          kn service create "${TAG_DNS_LABEL:?}" "$@"
        fi
