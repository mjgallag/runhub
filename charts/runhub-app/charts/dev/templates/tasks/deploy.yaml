apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: deploy
  namespace: {{ template "runhub-app.namespaceEnvironmentReleaseChart" . }}
spec:
  params:
    - name: service
      type: string
    - name: subroute-tag
      type: string
    - name: image
      type: string
    - name: image-tag
      type: string
    - name: protocol
      type: string
    - name: domain
      type: string
    - name: initialScale
      type: string
    - name: minScale
      type: string
  workspaces:
    - name: prod-kubeconfig
      readOnly: true
      optional: true
  results:
    - name: revision-name
  steps:
    - name: deploy
      image: gcr.io/knative-releases/knative.dev/client/cmd/kn:{{ template "runhub-app.dev.knImageTag" . }}
      script: |
        if [ '$(workspaces.prod-kubeconfig.path)' ]; then
          export KUBECONFIG=$(workspaces.prod-kubeconfig.path)/kubeconfig
        fi

        if [ '$(params.protocol)' = 'http' ]; then
          DISABLE_AUTO_TLS='true'
        else
          DISABLE_AUTO_TLS='false'
        fi

        if [ '$(params.subroute-tag)' ]; then
          SUBROUTE_SUBDOMAIN_PREFIX='$(params.subroute-tag)-'
        fi

        REVISION_NAME='$(params.service)-$(params.image-tag)-$(context.taskRun.uid)'

        set -- \
          --image '$(params.image):$(params.image-tag)' \
          --annotation-service networking.knative.dev/disableAutoTLS="${DISABLE_AUTO_TLS:?}" \
          --annotation-service domain='$(params.domain)' \
          --scale-init '$(params.initialScale)' \
          --scale-min '$(params.minScale)' \
        {{- range $serviceName, $service := .Values.services }}
          --env 'RUNHUB_SERVICE_{{ upper $serviceName }}_URL=$(params.protocol)://'"${SUBROUTE_SUBDOMAIN_PREFIX}"'{{ $service.subdomain }}.$(params.domain)' \
        {{- end }}
          --revision-name "${REVISION_NAME:?}"

        if kn service describe '$(params.service)'; then
          kn service update '$(params.service)' "$@"
        else
          kn service create '$(params.service)' "$@" \
            --pull-secret container-registry-dockerconfigjson
        fi

        printf "${REVISION_NAME:?}" > '$(results.revision-name.path)'
