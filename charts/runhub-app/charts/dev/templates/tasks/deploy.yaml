apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: deploy
spec:
  params:
    - name: service
      type: string
    - name: service-tag
      type: string
    - name: image
      type: string
    - name: image-tag
      type: string
    - name: environment
      type: string
  workspaces:
    - name: prod-kubeconfig
      readOnly: true
      optional: true
  steps:
    - name: deploy
      image: gcr.io/knative-releases/knative.dev/client/cmd/kn:{{ template "runhub-app.dev.knImageTag" . }}
      script: |
        if [ '$(workspaces.prod-kubeconfig.path)' ]; then
          export KUBECONFIG=$(workspaces.prod-kubeconfig.path)/kubeconfig
        fi

        if [ '$(params.environment)' = 'dev' ]; then
          DOMAIN='{{ $.Values.domain }}'
          SCALE_INIT=0
          SCALE_MIN=0
        elif [ '$(params.environment)' = 'prod' ]; then
          DOMAIN='{{ $.Values.global.prodDomain }}'
          SCALE_INIT=1
          SCALE_MIN=1
        fi

        if [ '$(params.service-tag)' ]; then
          SERVICE='$(params.service)-$(params.service-tag)'
          SERVICE_SUFFIX='-$(params.service-tag)'
        else
          SERVICE='$(params.service)'
        fi

        PROTOCOL='http{{ if .Values.global.tls }}s{{ end }}'

        set -- \
          --image '{{ template "runhub-app.dev.imagePathWithRegistry" . }}/$(params.image):$(params.image-tag)' \
          --env RUNHUB_ENVIRONMENT='$(params.environment)' \
        {{- range $serviceName, $service := .Values.services }}
          --env 'RUNHUB_SERVICE_{{ upper $serviceName }}_URL='"${PROTOCOL:?}"'://{{ $service.subdomain }}'"${SERVICE_SUFFIX}"'.'"${DOMAIN:?}" \
        {{- end }}
          --scale-init "${SCALE_INIT:?}" \
          --scale-min "${SCALE_MIN:?}" \
          --pull-secret container-registry-dockerconfigjson \
          --cluster-local

        if ! kn service update "${SERVICE:?}" "$@"; then
          kn service create "${SERVICE:?}" "$@"
        fi
