apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: deploy
spec:
  params:
    - name: service
      type: string
    - name: tag
      type: string
    - name: sha
      type: string
    - name: env
      type: string
{{- if (and .Values.release .Values.release.prodKubernetesCredentials) }}
  workspaces:
    - name: prod-kubeconfig
      readOnly: true
{{- end }}
  steps:
    - name: deploy
      image: gcr.io/knative-releases/knative.dev/client/cmd/kn:{{ template "runhub-app.dev.knImageTag" . }}
      script: |
        if [ '$(params.env)' = 'dev' ]; then
          DOMAIN='{{ $.Values.domain }}'
          SCALE_INIT=0
          SCALE_MIN=0
          TAG_PREFIX='$(params.tag).'
        elif [ '$(params.env)' = 'prod' ]; then
          export KUBECONFIG='$(workspaces.prod-kubeconfig.path)/kubeconfig'
          DOMAIN='{{ $.Values.global.prodDomain }}'
          SCALE_INIT=1
          SCALE_MIN=1
        fi

        set -- \
          --namespace '$(params.env)-{{ .Release.Name }}-$(params.service)' \
          --image '{{ template "runhub-app.dev.imagePathWithRegistry" . }}/$(params.service):$(params.tag)@$(params.sha)' \
          --env RUNHUB_ENV='$(params.env)' \
        {{- range $serviceName, $service := .Values.global.services }}
          --env 'RUNHUB_SERVICE_{{ upper $serviceName }}_URL=https://'"${TAG_PREFIX}"'{{ $service.subdomain }}.'"${DOMAIN:?}" \
        {{- end }}
          --scale-init "${SCALE_INIT:?}" \
          --scale-min "${SCALE_MIN:?}" \
          --request cpu=1,memory=4Gi \
          --limit cpu=1,memory=4Gi \
          --pull-secret container-registry-dockerconfigjson \
          --cluster-local

        if ! kn service update '$(params.tag)' "$@"; then
          kn service create '$(params.tag)' "$@"
        fi
