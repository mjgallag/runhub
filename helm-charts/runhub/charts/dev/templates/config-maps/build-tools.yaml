apiVersion: v1
kind: ConfigMap
metadata:
  name: build-tools
data:
  Dockerfile: |
    FROM alpine:3.13.5@sha256:69e70a79f2d41ab5d637de98c1e0b055206ba40a8145e7bddb55ccc04e13cf8f AS alpine
    RUN apk add --no-cache jq
    WORKDIR /tools
    COPY /tools/*.sh .
    RUN find . ! -name . -prune -name '*.sh' -exec chmod +x {} +

    FROM node:14.16.1-alpine3.13@sha256:7021600941a9caa072c592b6a89cec80e46cb341d934f1868220f5786f236f60 AS node
    RUN npm install --global npm@7.12.0  && npm cache clean --force

    FROM alpine AS src
    ARG APP
    WORKDIR "/${APP}-src"
    COPY /src .

    FROM src AS src-dependencies
    ARG APP
    RUN ../tools/cp-package-jsons.sh . "../${APP}-src-dependencies"

    FROM src-dependencies AS src-dependencies-production
    ARG APP
    WORKDIR "/${APP}-src-dependencies"
    RUN cp -R . "../${APP}-src-dependencies-production" && rm -R "../${APP}-src-dependencies-production/packages"
    ARG SERVICE_SRC_PATH
    RUN ../tools/cp-production-packages.sh "${SERVICE_SRC_PATH}/package.json" "../${APP}-src-dependencies-production"

    FROM node AS build
    ARG APP
    WORKDIR "/${APP}-build"
    COPY --from=src-dependencies "/${APP}-src-dependencies" .
    RUN npm ci && npm cache clean --force
    COPY --from=src "/${APP}-src" .
    ARG SERVICE_SRC_PATH
    WORKDIR "${SERVICE_SRC_PATH}"
    RUN npm run --if-present build
    WORKDIR "/${APP}-build"
    RUN find . -name node_modules -prune -exec rm -Rf {} +

    FROM alpine AS build-production
    ARG APP
    WORKDIR "/${APP}-build"
    COPY --from=build "/${APP}-build" .
    RUN cp -R . "../${APP}-build-production" && rm -R "../${APP}-build-production/packages"
    ARG SERVICE_SRC_PATH
    RUN ../tools/cp-production-packages.sh "${SERVICE_SRC_PATH}/package.json" "../${APP}-build-production"

    FROM node AS serve
    ENV NODE_ENV=production
    ARG APP
    WORKDIR "/${APP}"
    COPY --from=src-dependencies-production "/${APP}-src-dependencies-production" .
    RUN npm ci && npm cache clean --force
    COPY --from=build-production "/${APP}-build-production" .
    ARG SERVICE_SRC_PATH
    WORKDIR "${SERVICE_SRC_PATH}"
    ENTRYPOINT ["npm", "run", "serve"]
    EXPOSE 8080
  Dockerfile.dockerignore: |
    **/.git/
  cp-package-jsons.sh: |
    #!/bin/sh
    set -e

    find "${1:?}" \( -name package.json -o -name package-lock.json \) -exec sh -c \
      'mkdir -p "$(dirname "${2:?}/${1:?}")" && cp "${1:?}" "${2:?}/${1:?}"' \
      _ {} "${2:?}" \;
  cp-production-packages.sh: |
    #!/bin/sh
    set -e

    find_packages() {
      PACKAGE_DIR="$(cd "$(dirname "${1:?}")" && pwd)"
      echo "${PACKAGE_DIR:?}"

      PACKAGES=$(jq '
        .
          | select(has("dependencies"))
          | .dependencies
          | to_entries
          | .[]
          | .value
          | select(startswith("file:"))
          | sub("^file:"; "")
        ' "${1:?}" --raw-output)

      for PACKAGE in ${PACKAGES}; do
        PACKAGE_JSON="$(cd "${PACKAGE_DIR:?}/${PACKAGE:?}" && pwd)/package.json"
        find_packages "${PACKAGE_JSON:?}"
      done
    }

    for PACKAGE in $(find_packages "${1:?}" | sort | uniq); do
      PACKAGE_DIR=$(printf '%s' "${PACKAGE:?}" | cut -c "$(pwd | wc -m | tr -d ' ')-" | cut -c 2-)
      mkdir -p "$(dirname "${2:?}/${PACKAGE_DIR:?}")"
      cp -R "${PACKAGE_DIR:?}" "${2:?}/${PACKAGE_DIR:?}"
    done
